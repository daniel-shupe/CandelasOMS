@page "/products"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.Extensions.Configuration
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager NavigationManager
@inject IJSRuntime js

<h3>Product Manager</h3>
<div class="container">
    <button class="btn btn-block btn-success" @onclick="@(() => NewProduct())">New</button><hr />
    <select class="form-control" @onchange="@ChangeCategory">
        @foreach (var pt in productTypes)
        {
            <option value=@pt.ProductTypeId>@pt.Name</option>
        }
    </select>
</div>
@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <br />
    foreach (var p in products)
    {
        <div class="container">
            <div class="card">
                <div class="card-header" style="color:white; background-color:#309b57;">
                    <div class="card-title font-weight-bold">@p.Name <span class="float-right">@p.Price.ToString("C")</span></div>
                </div>
                <div class="card-body">
                    @p.Description
                </div>
                <div class="card-footer" style="background-color:#8a0808;">
                    <button class="btn btn-block btn-warning" @onclick="@(() => ViewProduct(p.Id))">Edit</button>
                    <button class="btn btn-block btn-danger" @onclick="@(() => DeleteProduct(p.Id))">Delete</button>
                </div>
            </div>
        </div>
        <br />
    }
}
@code {
    string category;
    List<Product> products;
    List<ProductType> productTypes;
    protected override async Task OnInitializedAsync()
    {

        string sql = "select product_type_id as ProductTypeId, name as Name from product_types;";
        productTypes = await _data.LoadData<ProductType, dynamic>(sql, new { }, _config.GetConnectionString("OMS"));
        sql = "select p.product_id as Id, p.name as Name, p.description as Description, p.price as Price, p.product_type_id as ProductTypeID, pt.name as ProductTypeName from products p join product_types pt on pt.product_type_id = p.product_type_id where p.product_type_id = @pid;";
        products = await _data.LoadData<Product, dynamic>(sql, new { pid = 1}, _config.GetConnectionString("OMS"));
    }

    private async Task ChangeCategory(ChangeEventArgs e)
    {
        category = e.Value.ToString();
        string sql = "select p.product_id as Id, p.name as Name, p.description as Description, p.price as Price, p.product_type_id as ProductTypeID, pt.name as ProductTypeName from products p join product_types pt on pt.product_type_id = p.product_type_id where p.product_type_id = @ptid;";
        products = await _data.LoadData<Product, dynamic>(sql, new { ptid = category }, _config.GetConnectionString("OMS"));
    }

    private void ViewProduct(int id)
    {
        string url = "product/" + id.ToString();
        NavigationManager.NavigateTo(url);
    }

    private void NewProduct()
    {
        string url = "product/";
        NavigationManager.NavigateTo(url);
    }

    private async Task DeleteProduct(int id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product? (This can not be undone!)");
        if (confirmed)
        {
            string sql = "delete from products where product_id = @pid;";
            await _data.SaveData(sql, new { pid = id }, _config.GetConnectionString("OMS"));
            await OnInitializedAsync();
        }
    }

}
